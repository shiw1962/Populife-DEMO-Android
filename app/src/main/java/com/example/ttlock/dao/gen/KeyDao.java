package com.example.ttlock.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.ttlock.model.Key;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KEY".
*/
public class KeyDao extends AbstractDao<Key, Long> {

    public static final String TABLENAME = "KEY";

    /**
     * Properties of entity Key.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserType = new Property(1, String.class, "userType", false, "USER_TYPE");
        public final static Property KeyStatus = new Property(2, String.class, "keyStatus", false, "KEY_STATUS");
        public final static Property LockId = new Property(3, int.class, "lockId", false, "LOCK_ID");
        public final static Property KeyId = new Property(4, int.class, "keyId", false, "KEY_ID");
        public final static Property LockVersion = new Property(5, String.class, "lockVersion", false, "LOCK_VERSION");
        public final static Property LockName = new Property(6, String.class, "lockName", false, "LOCK_NAME");
        public final static Property LockAlias = new Property(7, String.class, "lockAlias", false, "LOCK_ALIAS");
        public final static Property LockMac = new Property(8, String.class, "lockMac", false, "LOCK_MAC");
        public final static Property ElectricQuantity = new Property(9, int.class, "electricQuantity", false, "ELECTRIC_QUANTITY");
        public final static Property LockFlagPos = new Property(10, int.class, "lockFlagPos", false, "LOCK_FLAG_POS");
        public final static Property AdminPwd = new Property(11, String.class, "adminPwd", false, "ADMIN_PWD");
        public final static Property LockKey = new Property(12, String.class, "lockKey", false, "LOCK_KEY");
        public final static Property NoKeyPwd = new Property(13, String.class, "noKeyPwd", false, "NO_KEY_PWD");
        public final static Property DeletePwd = new Property(14, String.class, "deletePwd", false, "DELETE_PWD");
        public final static Property PwdInfo = new Property(15, String.class, "pwdInfo", false, "PWD_INFO");
        public final static Property Timestamp = new Property(16, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property AesKeyStr = new Property(17, String.class, "aesKeyStr", false, "AES_KEY_STR");
        public final static Property StartDate = new Property(18, long.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(19, long.class, "endDate", false, "END_DATE");
        public final static Property SpecialValue = new Property(20, int.class, "specialValue", false, "SPECIAL_VALUE");
        public final static Property TimezoneRawOffset = new Property(21, int.class, "timezoneRawOffset", false, "TIMEZONE_RAW_OFFSET");
        public final static Property KeyRight = new Property(22, int.class, "keyRight", false, "KEY_RIGHT");
        public final static Property KeyboardPwdVersion = new Property(23, int.class, "keyboardPwdVersion", false, "KEYBOARD_PWD_VERSION");
        public final static Property RemoteEnable = new Property(24, int.class, "remoteEnable", false, "REMOTE_ENABLE");
        public final static Property Remarks = new Property(25, String.class, "remarks", false, "REMARKS");
        public final static Property ModelNum = new Property(26, String.class, "modelNum", false, "MODEL_NUM");
        public final static Property HardwareRevision = new Property(27, String.class, "hardwareRevision", false, "HARDWARE_REVISION");
        public final static Property FirmwareRevision = new Property(28, String.class, "firmwareRevision", false, "FIRMWARE_REVISION");
    }


    public KeyDao(DaoConfig config) {
        super(config);
    }
    
    public KeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KEY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_TYPE\" TEXT," + // 1: userType
                "\"KEY_STATUS\" TEXT," + // 2: keyStatus
                "\"LOCK_ID\" INTEGER NOT NULL ," + // 3: lockId
                "\"KEY_ID\" INTEGER NOT NULL ," + // 4: keyId
                "\"LOCK_VERSION\" TEXT," + // 5: lockVersion
                "\"LOCK_NAME\" TEXT," + // 6: lockName
                "\"LOCK_ALIAS\" TEXT," + // 7: lockAlias
                "\"LOCK_MAC\" TEXT," + // 8: lockMac
                "\"ELECTRIC_QUANTITY\" INTEGER NOT NULL ," + // 9: electricQuantity
                "\"LOCK_FLAG_POS\" INTEGER NOT NULL ," + // 10: lockFlagPos
                "\"ADMIN_PWD\" TEXT," + // 11: adminPwd
                "\"LOCK_KEY\" TEXT," + // 12: lockKey
                "\"NO_KEY_PWD\" TEXT," + // 13: noKeyPwd
                "\"DELETE_PWD\" TEXT," + // 14: deletePwd
                "\"PWD_INFO\" TEXT," + // 15: pwdInfo
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 16: timestamp
                "\"AES_KEY_STR\" TEXT," + // 17: aesKeyStr
                "\"START_DATE\" INTEGER NOT NULL ," + // 18: startDate
                "\"END_DATE\" INTEGER NOT NULL ," + // 19: endDate
                "\"SPECIAL_VALUE\" INTEGER NOT NULL ," + // 20: specialValue
                "\"TIMEZONE_RAW_OFFSET\" INTEGER NOT NULL ," + // 21: timezoneRawOffset
                "\"KEY_RIGHT\" INTEGER NOT NULL ," + // 22: keyRight
                "\"KEYBOARD_PWD_VERSION\" INTEGER NOT NULL ," + // 23: keyboardPwdVersion
                "\"REMOTE_ENABLE\" INTEGER NOT NULL ," + // 24: remoteEnable
                "\"REMARKS\" TEXT," + // 25: remarks
                "\"MODEL_NUM\" TEXT," + // 26: modelNum
                "\"HARDWARE_REVISION\" TEXT," + // 27: hardwareRevision
                "\"FIRMWARE_REVISION\" TEXT);"); // 28: firmwareRevision
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KEY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Key entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(2, userType);
        }
 
        String keyStatus = entity.getKeyStatus();
        if (keyStatus != null) {
            stmt.bindString(3, keyStatus);
        }
        stmt.bindLong(4, entity.getLockId());
        stmt.bindLong(5, entity.getKeyId());
 
        String lockVersion = entity.getLockVersion();
        if (lockVersion != null) {
            stmt.bindString(6, lockVersion);
        }
 
        String lockName = entity.getLockName();
        if (lockName != null) {
            stmt.bindString(7, lockName);
        }
 
        String lockAlias = entity.getLockAlias();
        if (lockAlias != null) {
            stmt.bindString(8, lockAlias);
        }
 
        String lockMac = entity.getLockMac();
        if (lockMac != null) {
            stmt.bindString(9, lockMac);
        }
        stmt.bindLong(10, entity.getElectricQuantity());
        stmt.bindLong(11, entity.getLockFlagPos());
 
        String adminPwd = entity.getAdminPwd();
        if (adminPwd != null) {
            stmt.bindString(12, adminPwd);
        }
 
        String lockKey = entity.getLockKey();
        if (lockKey != null) {
            stmt.bindString(13, lockKey);
        }
 
        String noKeyPwd = entity.getNoKeyPwd();
        if (noKeyPwd != null) {
            stmt.bindString(14, noKeyPwd);
        }
 
        String deletePwd = entity.getDeletePwd();
        if (deletePwd != null) {
            stmt.bindString(15, deletePwd);
        }
 
        String pwdInfo = entity.getPwdInfo();
        if (pwdInfo != null) {
            stmt.bindString(16, pwdInfo);
        }
        stmt.bindLong(17, entity.getTimestamp());
 
        String aesKeyStr = entity.getAesKeyStr();
        if (aesKeyStr != null) {
            stmt.bindString(18, aesKeyStr);
        }
        stmt.bindLong(19, entity.getStartDate());
        stmt.bindLong(20, entity.getEndDate());
        stmt.bindLong(21, entity.getSpecialValue());
        stmt.bindLong(22, entity.getTimezoneRawOffset());
        stmt.bindLong(23, entity.getKeyRight());
        stmt.bindLong(24, entity.getKeyboardPwdVersion());
        stmt.bindLong(25, entity.getRemoteEnable());
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(26, remarks);
        }
 
        String modelNum = entity.getModelNum();
        if (modelNum != null) {
            stmt.bindString(27, modelNum);
        }
 
        String hardwareRevision = entity.getHardwareRevision();
        if (hardwareRevision != null) {
            stmt.bindString(28, hardwareRevision);
        }
 
        String firmwareRevision = entity.getFirmwareRevision();
        if (firmwareRevision != null) {
            stmt.bindString(29, firmwareRevision);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Key entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(2, userType);
        }
 
        String keyStatus = entity.getKeyStatus();
        if (keyStatus != null) {
            stmt.bindString(3, keyStatus);
        }
        stmt.bindLong(4, entity.getLockId());
        stmt.bindLong(5, entity.getKeyId());
 
        String lockVersion = entity.getLockVersion();
        if (lockVersion != null) {
            stmt.bindString(6, lockVersion);
        }
 
        String lockName = entity.getLockName();
        if (lockName != null) {
            stmt.bindString(7, lockName);
        }
 
        String lockAlias = entity.getLockAlias();
        if (lockAlias != null) {
            stmt.bindString(8, lockAlias);
        }
 
        String lockMac = entity.getLockMac();
        if (lockMac != null) {
            stmt.bindString(9, lockMac);
        }
        stmt.bindLong(10, entity.getElectricQuantity());
        stmt.bindLong(11, entity.getLockFlagPos());
 
        String adminPwd = entity.getAdminPwd();
        if (adminPwd != null) {
            stmt.bindString(12, adminPwd);
        }
 
        String lockKey = entity.getLockKey();
        if (lockKey != null) {
            stmt.bindString(13, lockKey);
        }
 
        String noKeyPwd = entity.getNoKeyPwd();
        if (noKeyPwd != null) {
            stmt.bindString(14, noKeyPwd);
        }
 
        String deletePwd = entity.getDeletePwd();
        if (deletePwd != null) {
            stmt.bindString(15, deletePwd);
        }
 
        String pwdInfo = entity.getPwdInfo();
        if (pwdInfo != null) {
            stmt.bindString(16, pwdInfo);
        }
        stmt.bindLong(17, entity.getTimestamp());
 
        String aesKeyStr = entity.getAesKeyStr();
        if (aesKeyStr != null) {
            stmt.bindString(18, aesKeyStr);
        }
        stmt.bindLong(19, entity.getStartDate());
        stmt.bindLong(20, entity.getEndDate());
        stmt.bindLong(21, entity.getSpecialValue());
        stmt.bindLong(22, entity.getTimezoneRawOffset());
        stmt.bindLong(23, entity.getKeyRight());
        stmt.bindLong(24, entity.getKeyboardPwdVersion());
        stmt.bindLong(25, entity.getRemoteEnable());
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(26, remarks);
        }
 
        String modelNum = entity.getModelNum();
        if (modelNum != null) {
            stmt.bindString(27, modelNum);
        }
 
        String hardwareRevision = entity.getHardwareRevision();
        if (hardwareRevision != null) {
            stmt.bindString(28, hardwareRevision);
        }
 
        String firmwareRevision = entity.getFirmwareRevision();
        if (firmwareRevision != null) {
            stmt.bindString(29, firmwareRevision);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Key readEntity(Cursor cursor, int offset) {
        Key entity = new Key( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keyStatus
            cursor.getInt(offset + 3), // lockId
            cursor.getInt(offset + 4), // keyId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lockVersion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lockName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lockAlias
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lockMac
            cursor.getInt(offset + 9), // electricQuantity
            cursor.getInt(offset + 10), // lockFlagPos
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // adminPwd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lockKey
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // noKeyPwd
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // deletePwd
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pwdInfo
            cursor.getLong(offset + 16), // timestamp
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // aesKeyStr
            cursor.getLong(offset + 18), // startDate
            cursor.getLong(offset + 19), // endDate
            cursor.getInt(offset + 20), // specialValue
            cursor.getInt(offset + 21), // timezoneRawOffset
            cursor.getInt(offset + 22), // keyRight
            cursor.getInt(offset + 23), // keyboardPwdVersion
            cursor.getInt(offset + 24), // remoteEnable
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // remarks
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // modelNum
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // hardwareRevision
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // firmwareRevision
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Key entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKeyStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLockId(cursor.getInt(offset + 3));
        entity.setKeyId(cursor.getInt(offset + 4));
        entity.setLockVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLockName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLockAlias(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLockMac(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setElectricQuantity(cursor.getInt(offset + 9));
        entity.setLockFlagPos(cursor.getInt(offset + 10));
        entity.setAdminPwd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLockKey(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNoKeyPwd(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDeletePwd(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPwdInfo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTimestamp(cursor.getLong(offset + 16));
        entity.setAesKeyStr(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStartDate(cursor.getLong(offset + 18));
        entity.setEndDate(cursor.getLong(offset + 19));
        entity.setSpecialValue(cursor.getInt(offset + 20));
        entity.setTimezoneRawOffset(cursor.getInt(offset + 21));
        entity.setKeyRight(cursor.getInt(offset + 22));
        entity.setKeyboardPwdVersion(cursor.getInt(offset + 23));
        entity.setRemoteEnable(cursor.getInt(offset + 24));
        entity.setRemarks(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setModelNum(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setHardwareRevision(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setFirmwareRevision(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Key entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Key entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Key entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
